<script>
  import CodeGroup from "$lib/ui/CodeGroup.svelte";
  import ViteConfigSnippet from "./vite-config-snippet.js?raw";
  import Prism from "$lib/ui/Prism.svelte";
  import Callout from "$lib/ui/Callout.svelte";
</script>

# Getting Started

<Callout type="warning">
T18S is still in early development. Expect breaking changes and a lot of new features.
</Callout>

## Installation

First you need to install t18s as a dev dependency.

<CodeGroup let:Header let:Tab>
  <Header title="Installation" />
  <Tab name="npm"
    ><Prism code="npm install --save-dev t18s" language="bash" /></Tab
  >
  <Tab name="yarn"><Prism code="yarn add --dev t18s" language="bash" /></Tab>
  <Tab name="pnpm"
    ><Prism code="pnpm add --save-dev t18s" language="bash" /></Tab
  >
</CodeGroup>

T18S isn't just a library, it's a vite-plugin, so you will need to register it
in your vite config.

<CodeGroup let:Header let:Tab>
  <Header title="vite.config.js" />
  <Tab>
    <Prism code={ViteConfigSnippet} language="javascript" />
  </Tab>
</CodeGroup>

You will need to at least one option in the plugin options; The list of
locales that you want to support. Additionally you may use a fallback locale
that will be used if a message is missing in the current locale.

## Adding messages

Create a folder `translations` in your `src` folder. This is the default location
in which t18s will look for messages. Then create a file called `en.yaml` there.

<CodeGroup let:Header let:Tab>
  <Header title="src/translations/en.yaml" />
  <Tab>
    <Prism code={`hello: Hello World`} language="yaml" />
  </Tab>
</CodeGroup>

Now in your svelte component you can use the `t` store exported from the `$t18s` (with the **$**!) to access the messages.

<CodeGroup let:Header let:Tab>
  <Header title="src/App.svelte" />
  <Tab>
    <Prism code={`<script>
  import { t } from "$t18s";
</script>
{$t("hello")}`}
language="svelte" />
  </Tab>
</CodeGroup>
